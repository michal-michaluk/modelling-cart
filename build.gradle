plugins {
    id "org.springframework.boot" version "2.6.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java"
    id "au.com.dius.pact" version "4.1.7"
}

group = "com.vattenfall.emobility"
version = "0.0.1"
sourceCompatibility = "1.17"
targetCompatibility = "1.17"

def artifactsEnvAccessToken = System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN")

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    set("azureVersion", "2.1.6")
}

dependencies {
    //Spring
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.kafka:spring-kafka"
    implementation "io.micrometer:micrometer-core:1.8.0"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    runtimeOnly "org.postgresql:postgresql:42.3.1"

    //Lombok
    compileOnly "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok"

    //Kafka
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.apache.kafka:kafka-streams"

    // ShedLock
    implementation 'net.javacrumbs.shedlock:shedlock-spring:4.30.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.30.0'

    // retry policy
    implementation "net.jodah:failsafe:2.4.3"

    //Azure
    implementation "com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter"
    implementation "com.microsoft.azure:azure-spring-boot-starter"
    implementation "com.azure:azure-storage-blob:12.14.2"
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "io.vavr:vavr:0.10.4"

    // log4j
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'

    // Togglz
    implementation('org.togglz:togglz-spring-boot-starter:3.2.1')
    implementation('org.togglz:togglz-console:3.2.1')

    // Azure AI
    implementation "com.microsoft.azure:applicationinsights-logging-log4j2:2.6.4"
    implementation "com.microsoft.azure:applicationinsights-agent:3.2.4"

    implementation "io.github.resilience4j:resilience4j-retry:1.7.1"
    implementation "com.vladmihalcea:hibernate-types-52:2.14.0"
    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.apache.commons:commons-text:1.9"
    implementation 'org.apache.commons:commons-csv:1.9.0'

    //Tests
    testImplementation 'org.liquibase:liquibase-core'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    //OpenAPi 3
    implementation("org.springdoc:springdoc-openapi-ui:1.5.12")
    testImplementation("io.swagger.parser.v3:swagger-parser:2.0.28")

    testImplementation "org.testcontainers:testcontainers:1.16.2"
    testImplementation "org.testcontainers:kafka:1.16.2"
    testImplementation "org.testcontainers:postgresql:1.16.2"
    testImplementation "org.awaitility:awaitility:4.1.1"
    testImplementation "au.com.dius.pact.consumer:junit5:4.3.2"
    testImplementation "au.com.dius.pact.provider:junit5spring:4.3.2"
    testImplementation "org.skyscreamer:jsonassert:1.5.0"
    testImplementation "org.springframework.security:spring-security-test"

    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
}

test {
    useJUnitPlatform()
    systemProperty("pact.provider.version", version)
    systemProperty("pact.provider.tag", "master")
    systemProperty("pact.verifier.publishResults", "true")
    jvmArgs("--enable-preview")
}

pact {
    publish {
        pactBrokerUrl = "https://pact-broker.xxx.net"
    }
}

configurations {
    //we exclude spring-boot-starter-logging, so that slf4j can switch to log4j2 (excluding logback-classic is not enough apparently)
    all {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
}

dependencyManagement {
    imports {
        mavenBom "com.microsoft.azure:azure-spring-boot-bom:${azureVersion}"
    }
}

compileJava {
    options.incremental = true
    options.compilerArgs << "--enable-preview"
    options.compilerArgs << "-parameters"
    options.compilerArgs << "-Xlint:unchecked"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << "--enable-preview"
    options.compilerArgs << "-parameters"
    options.compilerArgs << "-Xlint:unchecked"
}

// This prepares an empty dir with our jar for a docker image. Useful for the dockerfile, not to read any unnecessary files into the image

task copyJar(type: Copy) {
    from bootJar // here it automatically reads jar file produced from bootJar task
    into "${buildDir}/docker/"
}
build.dependsOn copyJar
